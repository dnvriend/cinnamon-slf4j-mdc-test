# Copyright 2016 Dennis Vriend
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

play.crypto.secret = "whatever"
play.crypto.secret = ${?PLAY_CRYPTO_SECRET}
play.application.loader = com.github.dnvriend.HelloLoader

lagom.circuit-breaker.default.max-failures = 10
lagom.spi.circuit-breaker-metrics-class = "cinnamon.lagom.CircuitBreakerInstrumentation"
cinnamon.chmetrics.reporters += "console-reporter"

akka {
  stdout-loglevel = "off"
  stdout-loglevel = ${?AKKA_STDOUT_LOGLEVEL}
  log-dead-letters-during-shutdown = "off"
  log-dead-letters-during-shutdown = ${?AKKA_LOG_DEAD_LETTERS_DURING_SHUTDOWN}
  loglevel = "info"
  loglevel = ${?AKKA_LOGLEVEL}
  log-dead-letters = "off"
  log-dead-letters = ${?AKKA_LOG_DEAD_LETTERS}
  log-config-on-start = "off"
  log-config-on-start = ${?AKKA_LOG_CONFIG_ON_START}

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    serialize-messages = off // when on, the akka framework will determine whether or not messages can be serialized, else the plugin

    debug {
      receive = off // log all messages sent to an actor if that actors receive method is a LoggingReceive
      autoreceive = off // log all special messages like Kill, PoisoffPill etc sent to all actors
      lifecycle = off // log all actor lifecycle events of all actors
      fsm = off // enable logging of all events, transitioffs and timers of FSM Actors that extend LoggingFSM
      event-stream = off // enable logging of subscriptions (subscribe/unsubscribe) on the ActorSystem.eventStream
    }
  }
}
